#pragma kernel LightAssign

#include "UnityCG.cginc"

struct ClusterBox
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};

struct PointLight
{
    float3 color;
    float intensity;
    float3 position;
    float radius;
};

struct LightIndex
{
    int count;
    int start;
};

RWStructuredBuffer<ClusterBox> _clusterBuffer;
RWStructuredBuffer<PointLight> _lightBuffer;
RWStructuredBuffer<uint> _lightAssignBuffer;
RWStructuredBuffer<LightIndex> _assignTable;

float _numClusterX;
float _numClusterY;
float _numClusterZ;
int _numLights;
int _maxNumLightsPerCluster;

uint Index3DTo1D(uint3 i)
{
    return i.z * _numClusterX * _numClusterY
        + i.y * _numClusterX
        + i.x;
}

bool PointSphereIntersect(float3 p, float4 shpere)
{
    return distance(p, shpere.xyz) < shpere.w;
}

bool ClusterLightIntersect(ClusterBox box, PointLight lit)
{
    float4 shpere = float4(lit.position, lit.radius);
    return PointSphereIntersect(box.p0, shpere) 
        || PointSphereIntersect(box.p1, shpere)
        || PointSphereIntersect(box.p2, shpere)
        || PointSphereIntersect(box.p3, shpere)
        || PointSphereIntersect(box.p4, shpere)
        || PointSphereIntersect(box.p5, shpere)
        || PointSphereIntersect(box.p6, shpere)
        || PointSphereIntersect(box.p7, shpere);
}

[numthreads(16,16,1)]
void LightAssign (
    uint3 gtid : SV_GroupThreadID, 
    uint3 gid : SV_GroupID)
{
    // cluster ID 
    uint i=gtid.x, j=gtid.y, k=gid.x;
    uint3 clusterId_3D = uint3(i,j,k);
    uint clusterId_1D = Index3DTo1D(clusterId_3D);

    ClusterBox box = _clusterBuffer[clusterId_1D];

    // 在 _lightAssignBuffer 中的索引
    uint startIndex = clusterId_1D * _maxNumLightsPerCluster;
    uint endIndex = startIndex;

    // 和光源求交
    for(int lid=0; lid<_numLights; lid++)
    {
        PointLight pl = _lightBuffer[lid];
        if(!ClusterLightIntersect(box, pl)) continue;
        _lightAssignBuffer[endIndex++] = uint(lid);
    }

    // 结果写回
    LightIndex idx;
    idx.count = endIndex - startIndex;
    idx.start = startIndex;
    _assignTable[clusterId_1D] = idx;
}
